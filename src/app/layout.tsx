/* eslint-disable react-hooks/exhaustive-deps */
"use client";
import "./globals.css";
import { Inter } from "next/font/google";
import { persistStore } from "redux-persist";
import { ScrollContext } from "@/context/AppProvider";
import MenuComponent from "@/components/MenuComponent/MenuComponent";
import { useEffect, useState } from "react";
import RollTop from "@/components/RollTop";
import ChatRoll from "@/components/ChatRoll";
import ChangeLanguage from "@/components/ChangeLanguage/ChangeLanguage";
import FooterComponent from "@/components/FooterComponent/FooterComponent";
import { PersistGate } from "redux-persist/integration/react";
import { store, persistor } from "@/redux/store";

const inter = Inter({ subsets: ["vietnamese"] });
import { usePathname } from "next/navigation";
import AlertOne from "@/util/Alert/AlertOne";
import ShowImage from "@/util/ShowImage/ShowImage";
import ChatAIComponent from "@/components/ChatAIComponent/ChatAIComponent";
import ShowConfirm from "@/util/ShowConfirm/ShowConfirm";
import { ToastContainer } from "react-toastify";
import ShowLoading from "@/util/ShowLoading/ShowLoading";
import ShowModalIf from "@/util/ShowModalIf/ShowModalIf";
import LoadingPageComponent from "@/components/LoadingPageComponent/LoadingPageComponent";
import loadingserverApi from "@/api/loadingserver";
import { SessionProvider } from "next-auth/react";
import ShowActive from "@/components/ShowActive/ShowActive";

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  // const persistor = persistStore(store);
  const [loadingServer, setLoadingServer] = useState<boolean>(false);
  const [reponsiveMobile, setReponsiveMobile] = useState<number>(0);
  useEffect(() => {
    window.addEventListener("load", () => {
      setReponsiveMobile(window.innerWidth);
    });
    window.addEventListener("resize", () => {
      setReponsiveMobile(window.innerWidth);
    });
  }, [reponsiveMobile]);
  const pathname = usePathname();
  const allowedPath = [
    "/login",
    "/reset-password",
    "/recruiter/reset-password",
    "/forgot-password",
    "/cofirm-password",
    "/page-error",
    "/recruiter/page-error",
    "/recruiter/login",
    "/recruiter/register",
    "/recruiter/forgot-password",
    "/register",
    "/recruiter/register",
  ];
  const allowedFooter = ["/chat"];

  const urlCustom = pathname.split("/").slice(0, -1).join("/");
  useEffect(() => {
    const fetchDataLoading = async () => {
      const res = await loadingserverApi.loading();
      if (res) {
        setLoadingServer(true);
      }
    };
    fetchDataLoading();
  }, []);
  const handleCheckPage = () => {
    const array = allowedPath.filter((dt: any) => {
      return pathname.includes(dt);
    });
    return array.length > 0;
  };
  return (
    <html lang="en">
      <body suppressHydrationWarning={true} className={inter.className}>
        {typeof window !== "undefined" && typeof document !== "undefined" ? (
          <ScrollContext>
            <PersistGate loading={null} persistor={persistor}>
              <SessionProvider>
                {loadingServer ? (
                  <>
                    {pathname.split("/").length <= 3
                      ? !allowedPath.includes(pathname) &&
                        !handleCheckPage() && <MenuComponent />
                      : !(urlCustom.trim() === "/reset-password") && (
                          <MenuComponent />
                        )}
                    {children}
                    <ChangeLanguage />
                    <ChatRoll />
                    <RollTop />
                    <AlertOne />
                    <ShowConfirm />
                    <ShowImage />
                    <ShowModalIf />
                    {pathname.split("/").length <= 3
                      ? !allowedPath.includes(pathname) &&
                        !allowedFooter.includes(pathname) &&
                        !handleCheckPage() && <FooterComponent />
                      : !(urlCustom.trim() === "/reset-password") && (
                          <FooterComponent />
                        )}

                    <ToastContainer />
                    <ShowLoading />
                  </>
                ) : (
                  <LoadingPageComponent />
                )}
              </SessionProvider>
            </PersistGate>
          </ScrollContext>
        ) : (
          children
        )}
      </body>
    </html>
  );
}
